<?php
 namespace Mgt\Varnish\Model\Plugin; use Laminas\Uri\Uri; class PurgeCachePlugin extends \Magento\CacheInvalidate\Model\PurgeCache { const REQUEST_TIMEOUT = 5; protected $coreLogger; protected $logger; protected $varnishConfig; protected $urlCollection; protected $objectManager; protected static $tagsRegistry = []; public function __construct(\Magento\PageCache\Model\Cache\Server $cacheServer, \Magento\CacheInvalidate\Model\SocketFactory $socketAdapterFactory, \Mgt\Varnish\Model\Cache\Config $varnishConfig, \Mgt\Varnish\Model\ResourceModel\Url\Collection $urlCollection, \Magento\Framework\ObjectManagerInterface $objectManager, \Psr\Log\LoggerInterface $coreLogger, \Mgt\Varnish\Model\Logger\Logger $logger) { goto Df301; de378: $this->coreLogger = $coreLogger; goto F5b23; Dbb25: $this->socketAdapterFactory = $socketAdapterFactory; goto Be8ca; Df301: $this->cacheServer = $cacheServer; goto Dbb25; D597b: $this->urlCollection = $urlCollection; goto de378; F5b23: $this->logger = $logger; goto D62f2; Be8ca: $this->varnishConfig = $varnishConfig; goto C60b8; C60b8: $this->objectManager = $objectManager; goto D597b; D62f2: } public function sendPurgeRequest($tagsPattern) { goto b2c8e; E8612: d8158: goto f0020; B65b5: F3cff: goto aafe2; Bcafc: if (!(true === $isCacheWarmerEnabled)) { goto cc3cd; } goto Ff17a; eb08c: E9110: goto c6601; Cde1c: $logMessage = ''; goto e7d1e; add17: if (true === is_array($tagsPattern)) { goto a8c09; } goto Cde1c; B4379: return true; goto b58e1; d81cb: $tagsPattern = []; goto c31f3; f764d: foreach ($tagsPattern as $tag) { goto acecd; F0ae6: de609: goto Dc38d; acecd: if (isset(self::$tagsRegistry[$tag])) { goto B3bdf; } goto e622e; b012e: self::$tagsRegistry[$tag] = $tag; goto Bba43; e622e: $tags[] = $tag; goto b012e; Bba43: B3bdf: goto F0ae6; Dc38d: } goto D203e; Cf23a: $isCacheWarmerEnabled = $this->varnishConfig->isCacheWarmerEnabled(); goto Bcafc; d7eab: $this->_sendPurgeRequest($headers); goto Cf23a; b2c8e: $tags = []; goto add17; d9b6a: $headers = [self::HEADER_X_MAGENTO_TAGS_PATTERN => $tagsPattern]; goto d7eab; f6335: $tagsPattern = implode("\174", array_unique($tagsPattern)); goto Bf472; D203e: c43d8: goto a44b1; d63e8: Be336: goto E8612; aafe2: $pattern = "\x28\50\x5e\x7c\54\51\x25\163\50\54\174\x24\x29\51"; goto d81cb; c6601: $logMessage = sprintf("\126\x61\162\x6e\151\163\x68\40\x43\x61\143\x68\145\40\x70\165\162\x67\x65\144\40\x62\171\x20\x66\157\154\154\x6f\167\151\x6e\x67\x20\164\x61\147\163\x3a\x20\x25\x73", print_r($tags, true)); goto f6335; e7d1e: switch ($tagsPattern) { case "\x2e\52": $logMessage = "\x54\x68\145\40\x77\150\157\x6c\145\x20\126\x61\x72\x6e\151\163\x68\x20\103\x61\x63\150\145\40\150\141\x73\40\x62\145\x65\x6e\x20\160\x75\x72\147\145\x64"; goto d8158; } goto d63e8; f0020: goto edac5; goto Bf9fe; a44b1: if ($tags) { goto F3cff; } goto b964b; c31f3: foreach ($tags as $tag) { $tagsPattern[] = sprintf($pattern, $tag); D3e73: } goto eb08c; aefe6: cc3cd: goto Eaaf1; Eaaf1: $this->logMessage($logMessage); goto B4379; b964b: return true; goto B65b5; Bf9fe: a8c09: goto f764d; Ff17a: $this->addToQueue($tags); goto aefe6; Bf472: edac5: goto d9b6a; b58e1: } public function addToQueue(array $tags) { goto e0b4f; A337a: try { goto d044e; c2d11: D2c48: goto A89be; D5d8a: if (!count($urls)) { goto D2c48; } goto e4498; e1e32: foreach ($this->urlCollection as $url) { $urls[] = ["\163\x74\x6f\162\145\137\151\144" => $url->getStoreId(), "\160\141\164\150" => $url->getPath(), "\160\x72\x69\157\x72\x69\x74\x79" => \Mgt\Varnish\Model\UrlQueue::PRIORITY_HIGH]; E7012: } goto Bf450; Bf450: Cca9b: goto D5d8a; Ca14d: $urlQueue->addToQueue($urls); goto c2d11; a76a3: $this->urlCollection->addTagsFilter($tags); goto e1e32; d044e: $urls = []; goto a76a3; e4498: $urlQueue = $this->objectManager->create("\x4d\x67\164\x5c\126\141\162\x6e\x69\x73\150\x5c\115\x6f\x64\145\x6c\134\125\162\154\121\x75\x65\x75\x65"); goto Ca14d; A89be: } catch (\Exception $e) { $errorMessage = sprintf("\101\x6e\x20\145\162\162\157\162\40\x6f\x63\x63\x75\x72\162\145\x64\x20\x64\x75\x72\x69\156\x67\40\x61\144\x64\x69\x6e\x67\x20\164\157\40\161\x75\x65\165\x65\54\x20\x65\162\x72\157\162\40\155\145\x73\x73\141\x67\145\x3a\x20\x25\x73", $e->getMessage()); $this->coreLogger->error($errorMessage); } goto e758b; e758b: c426c: goto fa622; e0b4f: if (!count($tags)) { goto c426c; } goto A337a; fa622: } public function purgeStoreRequest(\Magento\Store\Model\Store $store) { goto C71ec; c2925: $headers = ["\x48\117\x53\x54" => $uri->getHost()]; goto ee755; ee849: $logMessage = sprintf("\x53\x74\157\162\x65\x20\x77\151\164\x68\40\x62\x61\163\145\x20\x75\162\x6c\x3a\40\x25\163\x20\50\111\x44\72\40\x25\163\51\40\150\141\x73\40\142\x65\x65\156\x20\160\165\x72\147\x65\x64", $store->getBaseUrl(), $store->getStoreId()); goto Ea1bb; ee755: $this->_sendPurgeRequest($headers); goto ee849; Ea1bb: $this->logMessage($logMessage); goto aed28; C71ec: $uri = new Uri($store->getBaseUrl()); goto c2925; aed28: } public function purgeUrlRequest($url) { goto f5208; c2931: $headers = ["\110\x4f\123\124" => $uri->getHost()]; goto Cb237; E5c8a: $this->logMessage($logMessage); goto a5bf8; fbde3: $logMessage = sprintf("\x55\162\x6c\72\x20\x25\163\x20\150\x61\163\40\x62\x65\145\x6e\40\x70\x75\162\x67\x65\144", $url); goto E5c8a; Cb237: $this->_sendPurgeRequest($headers, $uri->getPath()); goto fbde3; f5208: $uri = new Uri($url); goto c2931; a5bf8: } protected function _sendPurgeRequest(array $headers, $path = null) { goto c69c2; a73e9: foreach ($servers as $server) { try { goto E8056; E8056: if (!(null !== $path)) { goto D3a6f; } goto fdb8d; B9901: $socketAdapter->connect($server->getHost(), $server->getPort()); goto b37a3; fdb8d: $server->setPath($path); goto b88d9; d46da: $socketAdapter->close(); goto d931b; b37a3: $socketAdapter->write("\120\x55\x52\x47\x45", $server, "\x31\x2e\x31", $headers); goto d46da; b88d9: D3a6f: goto B9901; d931b: } catch (\Exception $e) { goto Dd7d3; Db8f9: throw new \Exception($errorMessage); goto f3596; A870a: $this->logMessage($errorMessage, true); goto Db8f9; Dd7d3: $errorMessage = sprintf("\101\156\40\145\162\x72\157\x72\40\157\143\143\x75\x72\162\145\x64\x20\x64\x75\x72\151\156\147\40\160\165\162\147\151\156\x67\x2c\40\x65\x72\162\157\162\40\x6d\145\x73\x73\141\x67\145\72\40\x22\x25\x73\42", $e->getMessage()); goto A870a; f3596: } d53be: } goto cd4d8; c69c2: $socketAdapter = $this->socketAdapterFactory->create(); goto D0aae; D0aae: $socketAdapter->setOptions(["\164\151\x6d\x65\157\165\164" => self::REQUEST_TIMEOUT]); goto e6a2d; e6a2d: $servers = $this->getCacheServers(); goto a73e9; cd4d8: e643d: goto C1f4e; C1f4e: } protected function logMessage($message, $force = false) { goto a0f5f; E1c8f: if (!(true === $isDebugModeEnabled || true === $force)) { goto ec71c; } goto f0fc4; a0f5f: $isDebugModeEnabled = $this->varnishConfig->isDebugModeEnabled(); goto E1c8f; f0fc4: $this->logger->debug($message); goto C4617; C4617: ec71c: goto e4894; e4894: } protected function getCacheServers() { goto efa65; b5a73: return $cacheServers; goto Deb4f; a4ceb: foreach ($serverList as $server) { goto Af062; A6211: $uri = new Uri(); goto Df04f; Acc13: $cacheServers[] = $uri; goto E023d; f1d32: $uri->setPath("\x2f"); goto f8881; E4f5d: $uri->setPort($port); goto f1d32; Af062: list($host, $port) = explode("\x3a", $server); goto A6211; Df04f: $uri->setHost($host); goto E4f5d; f8881: $uri->setScheme("\x68\x74\x74\x70"); goto D82fa; D82fa: $uri->setQuery(null); goto Acc13; E023d: d50fc: goto b178e; b178e: } goto b4891; efa65: $cacheServers = []; goto e9989; b4891: Ae017: goto b5a73; e9989: $serverList = $this->varnishConfig->getServerList(); goto a4ceb; Deb4f: } }
